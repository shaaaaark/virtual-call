---
description:
globs:
alwaysApply: false
---
# 模拟来电APP开发工作流

## 开发环境设置

1. **安装依赖**:
```bash
# 使用pnpm安装依赖
pnpm install
```

2. **运行开发环境**:
```bash
# 启动Metro服务器
pnpm start

# 运行Android应用
pnpm run android

# 运行iOS应用(仅Mac)
pnpm run ios
```

## 代码规范

项目使用ESLint和Prettier确保代码质量和一致性:

- [.eslintrc.js](mdc:VirtualCall/.eslintrc.js): ESLint配置
- [.prettierrc.js](mdc:VirtualCall/.prettierrc.js): Prettier配置

## 开发流程

### 功能开发步骤

1. **需求分析**: 理解用户故事和功能需求
2. **组件设计**: 设计组件接口和交互
3. **状态管理**: 实现Redux状态管理
4. **服务实现**: 开发相关服务
5. **UI实现**: 实现组件UI
6. **测试验证**: 编写单元测试和进行手动测试

### Git工作流

Git提交记录格式: `[type]:[【影响的功能模块】][description]`

类型枚举:
- `feat`: 新增功能
- `fix`: 修复bug
- `docs`: 文档注释
- `style`: 代码格式(不影响代码运行的变动)
- `refactor`: 重构、优化
- `perf`: 性能优化
- `test`: 增加测试
- `chore`: 构建过程或辅助工具的变动
- `revert`: 回退
- `build`: 打包

示例: `feat:【设备详情】新增订单状态字段`

## 测试策略

- **单元测试**: 使用Jest测试业务逻辑和服务
- **组件测试**: 使用React Native Testing Library测试组件
- **端到端测试**: 使用Detox进行真机/模拟器上的端到端测试

## 构建与发布

### Android构建
```bash
# 开发版本
pnpm run android

# 生成APK
cd android && ./gradlew assembleRelease

# 生成AAB (Google Play)
cd android && ./gradlew bundleRelease
```

### iOS构建 (仅Mac)
```bash
# 开发版本
pnpm run ios

# 生成Archive
# 1. 通过Xcode打开ios/VirtualCall.xcworkspace
# 2. 选择Product > Archive
# 3. 在Organizer中选择分发方式
```

## 项目当前状态

项目目前处于**初始开发阶段**，已完成:
- 需求分析和架构设计
- 项目初始化和基础配置
- 项目文档 (README.md)

接下来将重点开发:
- 核心UI组件 (特别是来电界面模板)
- 铃声和震动服务
- 一键来电功能
